堆 ：可以存放new的对象和数组    可以被所有的线程共享，不会存放别的对象引用。
栈 ： 存放基本变量类型（会包含这个基本类型的具体数值） 、引用对象的变量（会存放这个引用在堆里面的具体地址）。
方法区 ： 可以被所有的线程共享，包含了所有的class和static变量。



类的加载过程：当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤对类进行初始化。

类的加载（load）-----类的链接（Link）------类的初始化（Initialize）
将类的class 文件读入内存，并为之创建一个java.lang.Class对象，此过程由类加载器完成---------将类的二进制数据合并到jre中 ，jvm负责对类初始化。


什么时候会发生类的初始化
  类的主动引用（v）
     当虚拟机启动，先初始化main方法所在的类
     new一个对象
     调用类的静态成员（除了final常量）和静态方法
     使用java.Lang.reflect包的方法对类进行反射调用
     当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类

类的被动引用（不会发生类的初始化）
当访问一个静态域时，只有真正声明这个域的类才会被初始化，如 当通过子类引用父类静态变量，不会导致子类初始化。
通过数组定义引用，不会触发此类的初始化
引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）


类加载器的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表类的java.lang.Class对象，作为方法区中类数据的访问入口

类缓存：标准的javaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载缓存一段时间，不过jvm垃圾回收机制可以回收这些class对象。
